// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
    field Array str;
    field int str_len;
    field int max_len;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let str_len = 0;
        let max_len = maxLength;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return str_len;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
        if (str_len < max_len) {
            let str[str_len] = c;
            let str_len = str_len + 1;
        }
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        if (str_len > 0) {
            let str_len = str_len - 1;
        }
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var boolean neg;
        var int val;
        var int i;

        if ((str_len > 0) & (str[0] = 45)) {  // '-'
            let neg = true;
            let i = 1;
        } else {
            let neg = false;
            let i = 0;
        }

        while ((i < str_len) & String.isDigit(str[i])) {
            let val = (val * 10) + String.char2digit(str[i]);
            let i = i + 1;
        }
        if (neg) {
            return -val;
        } else {
            return val;
        }
    }

    function boolean isDigit(char c) {
        return ~(c < 48) & ~(c > 57);
    }

    function int char2digit(char c) {
        return c - 48;
    }

    function char digit2char(int d) {
        return d + 48;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        let str_len = 0;  // reset string
        if (number < 0) {
            let number = -number;
            do appendChar(45);  // leading '-'
        }
        do do_set_int(number);
        return;
    }

    method void do_set_int(int number) {
        var int q, mod;
        var char c;

        let q = number / 10;
        let mod = number - (q * 10);
        let c = String.digit2char(mod);

        if (number < 10) {
            do appendChar(c);
        } else {
            do do_set_int(q);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
