// bootstrap code
@256
D=A
@SP
M=D
@Global.Bootstrap.ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Global.Bootstrap.ret.1)
// function Main.fibonacci 0
(Main.fibonacci)
@0
D=A
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt                     // check if n < 2
@SP
A=M-1
D=M
A=A-1
D=D-M
@LABEL1
D;JLE
@1
D=-A
@SP
A=M-1
A=A-1
M=D
@LABEL2
0;JMP
(LABEL1)
@0
D=A
@SP
A=M-1
A=A-1
M=D
(LABEL2)
@SP
M=M-1
// if-goto IF_TRUE
@SP
M=M-1
@SP
A=M
D=M
@IF_TRUE
D;JNE
// goto IF_FALSE
@IF_FALSE
0;JMP
// label IF_TRUE          // if n<2, return n
(IF_TRUE)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R6
M=D
@R6
D=M
@5
A=D-A
D=M
@R7
M=D
@ARG
D=M
@0
D=D+A
@R15
M=D
@SP
M=M-1
@SP
A=M
D=M
@R15
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R6
D=M
@1
A=D-A
D=M
@THAT
M=D
@R6
D=M
@2
A=D-A
D=M
@THIS
M=D
@R6
D=M
@3
A=D-A
D=M
@ARG
M=D
@R6
D=M
@4
A=D-A
D=M
@LCL
M=D
@R7
A=M
0;JMP
// label IF_FALSE         // if n>=2, return fib(n-2)+fib(n-1)
(IF_FALSE)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
// call Main.fibonacci 1  // compute fib(n-2)
@Main.fibonacci.ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci.ret.1)
// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
// call Main.fibonacci 1  // compute fib(n-1)
@Main.fibonacci.ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci.ret.2)
// add                    // return fib(n-1) + fib(n-2)
@SP
A=M-1
D=M
A=A-1
M=D+M
@SP
M=M-1
// return
@LCL
D=M
@R6
M=D
@R6
D=M
@5
A=D-A
D=M
@R7
M=D
@ARG
D=M
@0
D=D+A
@R15
M=D
@SP
M=M-1
@SP
A=M
D=M
@R15
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R6
D=M
@1
A=D-A
D=M
@THAT
M=D
@R6
D=M
@2
A=D-A
D=M
@THIS
M=D
@R6
D=M
@3
A=D-A
D=M
@ARG
M=D
@R6
D=M
@4
A=D-A
D=M
@LCL
M=D
@R7
A=M
0;JMP
// function Sys.init 0
(Sys.init)
@0
D=A
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1   // Compute the 4'th fibonacci element
@Sys.init.ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Sys.init.ret.1)
// label WHILE
(WHILE)
// goto WHILE              // Loop infinitely
@WHILE
0;JMP
